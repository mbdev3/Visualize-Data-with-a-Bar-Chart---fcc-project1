(function (React$1, ReactDOM, d3) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl ='https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json';

  const useData = ()=>{
  const [data, setData] = React$1.useState(null);
    if(data){
      console.log(data[0]);
    }

    React$1.useEffect(() => {
      d3.json(jsonUrl).then(data=>data.data ).then(setData);
    }, []);
  return data
  };

  const AxisBottom = ({
    xScale,
    innerHeight,
    tickFormat
  }) =>
    xScale.ticks().map((tickValue) => {
      console.log(tickValue);
      
      return React.createElement( 'g', { className: "tick", key: tickValue, transform: `translate(${xScale(
        tickValue
      )},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', {
          style: { textAnchor: 'middle' }, y: innerHeight + 5, dy: "0.71rem" },
          tickFormat(tickValue)
        )
      )
    });

  const gdpFormat = d3.format('.2s');
  const AxisLeft = ({
    yScale,
    innerWidth,
  }) =>
    yScale.ticks().map((tickValue) => (
      React.createElement( 'g', {
        className: "tick", transform: `translate(0,${yScale(
        tickValue
      )})` },
        React.createElement( 'line', { x2: innerWidth }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -5, dy: ".32em" },
          (tickValue )
        )
      )
    ));

  const Marks = ({
    binnedData,
    yScale,
    xScale,
    xValue,
    yValue,
    innerHeight,
    tooltip,
    yearsDate,
    onMouseEnter,
    onMouseOut,
  }) => (
    React.createElement( 'g', { className: "mark" },
      binnedData.map((d, i) => {
       
        return (
          React.createElement( 'rect', {
            x: xScale(yearsDate[i]), y: yScale(yValue(d)), width: xScale(yearsDate[i]) -
              xScale(yearsDate[i - 1]), height: innerHeight - yScale(yValue(d)), onMouseEnter: () =>
              onMouseEnter([xValue(d), yValue(d),xScale(yearsDate[i])]), onMouseOut: () => onMouseOut(null), class: "bar", 'data-date': (xValue(d)), 'data-gdp': (yValue(d)) })
        );
      })
    )
  );

  const width = window.innerWidth;
  const height = window.innerHeight;
  const margin = {
    top: 20,
    bottom: 100,
    right: 30,
    left: 110,
  };

  const App = () => {
    const data = useData();
    if (!data) {
      return React$1__default.createElement( 'pre', null, "loading.." );
    }

    const xValue = (d) => d[0];
    const xAxisLabel = 'Date';

    const yValue = (d) => d[1];

    const yAxisLabel = 'GDP';

    const innerHeight =
      height - margin.top - margin.bottom;
    const innerWidth =
      width - margin.right - margin.left;

    let yearsDate = data.map((d) => new Date(d[0]));
    // console.log(yearsDate);
    let xMax = new Date(d3.max(yearsDate));
    xMax.setMonth(xMax.getMonth() + 3);
    // console.log(xMax);
    const xScale = d3.scaleTime()
      .domain([d3.min(yearsDate), xMax])
      .range([0, innerWidth]);

    const [start, stop] = xScale.domain();
    const binnedData = d3.bin()
      .value(xValue)
      .domain(xScale.domain())
      .thresholds(d3.timeMonths(start, stop))(data)
      .map((array, i) => ({
        y: data[1].y,
        x0: array.x0,
        x1: array.x1,
      }));

    // console.log(xValue((d) => data(d)));

    // d['Total Dead and Missing'] = +d['Total Dead and Missing']
    //      d['Reported Date'] = new Date(d['Reported Date'] )

    const xAxisTickFormat = d3.timeFormat('%Y');
    const toolTimeFormat = d3.timeFormat(' %Y %B');
    const gdpFormat = d3.format('s');
    const yScale = d3.scaleLinear()
      .domain([0, d3.max(data, yValue)])
      .range([innerHeight, 0]);

    const monthFormatting = (m) => {
      let regex = '-(.*?)-';
      let match = m.match(regex);
      if (match[1] === '01') {
        return m.substr(0, 4) + ' Q1';
      }
      if (match[1] === '04') {
        return m.substr(0, 4) + ' Q2';
      }
      if (match[1] === '07') {
        return m.substr(0, 4) + ' Q3';
      }
      if (match[1] === '10') {
        return m.substr(0, 4) + ' Q4';
      }
    };

    const gdpFormatting = (m) => {
      m = m * 1000000000;
      m = gdpFormat(m);
      if (m.includes('T')) {
        return m.replace('T', ' Trillion USD');
      } else if (m.includes('G')) {
        return m.replace('G', ' Billion USD');
      }
      return m;
    };
    const onMouseEnter = (e) => {
      tooldiv
        .style('visibility', 'visible')
        .html(
          () =>
            `${monthFormatting(
            e[0]
          )}</br>${gdpFormatting(e[1])}`
        )
        .style('top', yScale(e[1]) + 'px')
        .style('left', e[2] + 'px')
        .attr('data-date', e[0])
        .on('mousemove', (e, d) => {
          tooldiv.style('top', 0).style('left', 0);
        });
    };
    const onMouseOut = (e) => {
      tooldiv.style('visibility', 'hidden');
    };
    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'div', { id: "title" },
          React$1__default.createElement( 'h1', null, "United States GDP" )
        ),
        React$1__default.createElement( 'svg', { width: width, height: height },
          React$1__default.createElement( 'g', {
            transform: `translate(${margin.left},${margin.top})` },
            React$1__default.createElement( 'g', { id: "x-axis" },
              React$1__default.createElement( AxisBottom, {
                innerHeight: innerHeight, xScale: xScale, tickFormat: xAxisTickFormat })
            ),
            React$1__default.createElement( 'g', { id: "y-axis" },
              React$1__default.createElement( AxisLeft, {
                yScale: yScale, innerWidth: innerWidth })
            ),

            React$1__default.createElement( 'text', {
              className: "label", textAnchor: "middle", x: innerWidth / 2, y: height - margin.bottom / 1.5 },
              xAxisLabel
            ),
            React$1__default.createElement( 'text', {
              className: "label", textAnchor: "middle", transform: `translate(${
              -margin.left / 1.5
            },${innerHeight / 2}) rotate(-90)` },
              yAxisLabel
            ),
            React$1__default.createElement( Marks, {
              binnedData: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, innerHeight: innerHeight, tooltip: (d) => d, yearsDate: yearsDate, onMouseEnter: (e) => onMouseEnter(e), onMouseOut: (e) => onMouseOut() })
          ),
          React$1__default.createElement( 'title', null, "US GDP" )
        )
      )
    );
  };

  const rootElement = document.getElementById(
    'root'
  );
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,